from room_grid import *

from typing import TYPE_CHECKING

# Make sure we can reference VirusAgent and VirusModel for typing hints
# Without running into cyclical dependencies.
if TYPE_CHECKING:
    from virus_model import VirusAgent, VirusModel


LECTURES_PER_DAY = 4
"""
The number of lectures per day.
"""

LECTURE_DURATION = 8
"""
The duration of 1 lecture measured in steps.
"""

DAY_DURATION = 8 * 4
PERCENTAGE_BREAKS = 10
"""
The percentage of gaps to put in the schedules. Each gap is 1 block, so 2 hours.
"""


class RoosterAgent:
    def __init__(self, agent: 'VirusAgent', model: 'VirusModel'):
        """
        Steps at the beginning of the day is needed to find out at which time the agent is in the day.
        """
        self.agent_id = agent.agent_id
        self.model = model
        self.rooster = self.model.rooster_model.rooster[:, self.agent_id]
        """
        The map containing the room this agent should be in for each step in the day.
        """


class RoosterModel:
    def __init__(self, model: 'VirusModel'):
        self.model = model

        self.break_room_id = self.model.grid.room_count
        """
        The ID of the 'break' room. I.e. the room where agents go to if they don't have any lectures.
        """

        self.rooster = np.full((DAY_DURATION, model.num_agents), self.break_room_id)
        """
        Rooster where rows are the steps in a day and col are all the agents.
        Defaults to the break room.
        """

    def get_random_room_id(self) -> Tuple[int, Optional[LectureRoom]]:
        """
        Gets a random room id and room tuple from the rooms generated by `RoomGrid`.

        If the random module selects a value less than `PERCENTAGE_BREAKS`, it will return `self.break_room_id` and no
        room at all; they agent gets a break.

        :return: A randomly selected room_id/LectureRoom pair.
        """
        if self.model.random.randrange(100) < PERCENTAGE_BREAKS:
            return self.break_room_id, None

        room_id = self.model.random.randrange(self.model.grid.room_count)
        room = self.model.grid.rooms_list[room_id]

        if not room.room_available():
            return self.get_random_room_id()

        room.is_reserved = True
        return room_id, room

    def __space_available_in_room(self, timeslot: int, room: LectureRoom, room_id: int) -> bool:
        """
        Checks if there is any space available in a room.

        :return: True if at least 1 seat is still available in the room.
        """
        return (self.rooster[timeslot, :] == room_id).sum() < room.get_capacity()

    def make_day_rooster(self) -> None:
        """
        Schedules the agents to specific rooms at specific times through the day.
        """
        for agent_id in range(self.model.num_agents):
            for timeslot in range(0, DAY_DURATION, LECTURE_DURATION):
                room_id, room = self.get_random_room_id()

                if room is None or not self.__space_available_in_room(timeslot, room, room_id):
                    # If room is None, either the schedule room is the break room,
                    # Or no room could be found for whatever reason, so just dump
                    # the agent in the break room.
                    # Also, if the room is full, we
                    self.rooster[timeslot:timeslot + LECTURE_DURATION, agent_id] = self.break_room_id
                    continue

                self.rooster[timeslot:timeslot + LECTURE_DURATION, agent_id] = room_id
